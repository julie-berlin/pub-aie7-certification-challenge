'use client'

import { useState } from 'react'
import { EthicsAssessment, SimplifiedAssessment, DetailedAspect } from '@/types'
import { ChevronDown, ChevronRight, AlertTriangle, CheckCircle, XCircle, AlertCircle, Download } from 'lucide-react'

interface AssessmentCardProps {
  assessment: EthicsAssessment
  className?: string
}

export default function AssessmentCard({ assessment, className = '' }: AssessmentCardProps) {
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set())

  const downloadDetailedReport = () => {
    // Generate comprehensive report content
    const reportContent = `# Federal Ethics Assessment Report
Generated on: ${new Date().toLocaleDateString()}

## Summary Assessment

**Finding:** ${assessment.simplified.direct_answer}
**Severity Level:** ${getSeverityLabel(assessment.simplified.severity)}
**Immediate Action Required:** ${assessment.simplified.immediate_action_required ? 'Yes' : 'No'}

**Next Steps:**
${assessment.simplified.next_steps_summary}

## Detailed Analysis

${assessment.detailed_aspects.map(aspect => `
### ${aspect.icon} ${aspect.title}

${aspect.content}
`).join('\n')}

## Disclaimer

This assessment is provided for informational purposes only and does not constitute legal advice. For specific legal questions, consult with a qualified attorney or your agency's ethics official.

---
*Generated by IntegriBot - Federal Ethics Compliance Assistant*`

    const blob = new Blob([reportContent], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `ethics-assessment-report-${new Date().toISOString().split('T')[0]}.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const toggleSection = (title: string) => {
    const newExpanded = new Set(expandedSections)
    if (newExpanded.has(title)) {
      newExpanded.delete(title)
    } else {
      newExpanded.add(title)
    }
    setExpandedSections(newExpanded)
  }

  const getSeverityColor = (severity: SimplifiedAssessment['severity']) => {
    switch (severity) {
      case 'no_violation':
        return 'bg-green-50 border-green-200 text-green-800'
      case 'minor':
        return 'bg-blue-50 border-blue-200 text-blue-800'
      case 'moderate':
        return 'bg-yellow-50 border-yellow-200 text-yellow-800'
      case 'serious':
        return 'bg-red-50 border-red-200 text-red-800'
      default:
        return 'bg-gray-50 border-gray-200 text-gray-800'
    }
  }

  const getSeverityIcon = (severity: SimplifiedAssessment['severity']) => {
    switch (severity) {
      case 'no_violation':
        return <CheckCircle className="w-5 h-5 text-green-600" />
      case 'minor':
        return <AlertCircle className="w-5 h-5 text-blue-600" />
      case 'moderate':
        return <AlertTriangle className="w-5 h-5 text-yellow-600" />
      case 'serious':
        return <XCircle className="w-5 h-5 text-red-600" />
      default:
        return <AlertTriangle className="w-5 h-5 text-gray-600" />
    }
  }

  const getSeverityLabel = (severity: SimplifiedAssessment['severity']) => {
    switch (severity) {
      case 'no_violation':
        return 'No Violation'
      case 'minor':
        return 'Minor Issue'
      case 'moderate':
        return 'Moderate Violation'
      case 'serious':
        return 'Serious Violation'
      default:
        return 'Assessment Needed'
    }
  }

  return (
    <div className={`bg-white rounded-lg shadow-md border ${className}`}>
      {/* Simplified Assessment Header */}
      <div className={`p-6 rounded-t-lg border-2 ${getSeverityColor(assessment.simplified.severity)}`}>
        <div className="flex items-start gap-4">
          <div className="flex-shrink-0">
            {getSeverityIcon(assessment.simplified.severity)}
          </div>
          
          <div className="flex-1">
            <div className="flex items-center gap-2 mb-2">
              <h3 className="text-lg font-semibold">
                {getSeverityLabel(assessment.simplified.severity)}
              </h3>
              {assessment.simplified.immediate_action_required && (
                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                  ðŸš¨ Immediate Action Required
                </span>
              )}
            </div>
            
            <p className="text-base font-medium mb-3">
              {assessment.simplified.direct_answer}
            </p>
            
            <div className="bg-white bg-opacity-50 rounded-md p-3">
              <h4 className="text-sm font-semibold mb-1">Next Steps:</h4>
              <p className="text-sm">
                {assessment.simplified.next_steps_summary}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Detailed Aspects - Expandable Sections */}
      <div className="border-t border-gray-200">
        <div className="p-4">
          <h4 className="text-sm font-semibold text-gray-700 mb-3">
            ðŸ“‹ Detailed Analysis
          </h4>
          
          <div className="space-y-2">
            {assessment.detailed_aspects.map((aspect, index) => (
              <div key={index} className="border border-gray-200 rounded-lg">
                <button
                  onClick={() => toggleSection(aspect.title)}
                  className="w-full flex items-center justify-between p-3 text-left hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset rounded-lg"
                >
                  <div className="flex items-center gap-2">
                    <span className="text-lg">{aspect.icon}</span>
                    <span className="font-medium text-gray-900">{aspect.title}</span>
                  </div>
                  
                  {expandedSections.has(aspect.title) ? (
                    <ChevronDown className="w-4 h-4 text-gray-500" />
                  ) : (
                    <ChevronRight className="w-4 h-4 text-gray-500" />
                  )}
                </button>
                
                {expandedSections.has(aspect.title) && (
                  <div className="px-3 pb-3 pt-0">
                    <div className="bg-gray-50 rounded-md p-3 text-sm text-gray-700 whitespace-pre-wrap">
                      {aspect.content}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="border-t border-gray-200 p-4 bg-gray-50 rounded-b-lg">
        <div className="flex flex-wrap gap-2">
          <button
            onClick={() => setExpandedSections(new Set(assessment.detailed_aspects.map(a => a.title)))}
            className="px-3 py-2 text-sm font-medium text-blue-600 bg-blue-50 hover:bg-blue-100 rounded-md border border-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            ðŸ“– Expand All Sections
          </button>
          
          <button
            onClick={() => setExpandedSections(new Set())}
            className="px-3 py-2 text-sm font-medium text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500"
          >
            ðŸ“„ Collapse All
          </button>
          
          <button
            onClick={downloadDetailedReport}
            className="px-3 py-2 text-sm font-medium text-green-600 bg-green-50 hover:bg-green-100 rounded-md border border-green-200 focus:outline-none focus:ring-2 focus:ring-green-500 inline-flex items-center gap-1"
          >
            <Download className="w-4 h-4" />
            ðŸ“Š Download Full Report
          </button>
        </div>
      </div>
    </div>
  )
}